Microsoft (R) Macro Assembler Version 14.29.30133.0	    12/04/21 21:49:19
String IO (Proj6_marshmeg.asm				     Page 1 - 1


				TITLE String IO (Proj6_marshmeg.asm)

				; Author: Megan Marshall
				; Last Modified: December 4, 2021
				; OSU email address:marshmeg@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6               Due Date: December 5, 2021
				; Description: This program uses macros to support string processing and user input/output. It gathers 10 string inputs 
				;				from the user, validates that they are integers in the correct range, sotres them in an array, and
				;				displays the results, their sum, and their truncated average to the user. 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; Macros!
				mGetString MACRO promptMessage, inputString, maxLength, bytesRead
				; Display a prompt (input parameter, by reference), then get the user’s keyboard input into a memory location (output parameter, by reference).
				;You may also need to provide a count (input parameter, by value) for the length of input string you can accommodate and a provide a number of bytes read 
				;(output parameter, by reference) by the macro.
					
					PUSH	EAX
					PUSH	ECX
					PUSH	EDX

					MOV		EDX, promptMessage
					CALL	WriteString
					MOV		ECX, maxLength
					MOV		EDX, inputString
					CALL	ReadString
					; Track how many characters the user entered.
					MOV		EDX, bytesRead
					MOV		[EDX], EAX

					POP		EDX
					POP		ECX
					POP		EAX
				ENDM

				mDisplayString MACRO printTarget
				;Print the string which is stored in a specified memory location (input parameter, by reference).
					PUSH	EDX
					MOV		EDX, printTarget
					CALL	WriteString
					POP		EDX
				ENDM

				; Constants. Defining bounds of valid ASCII inputs so I don't have ambiguous hex values in my code.
 = 0000002D			ASCII_MINUS		EQU		2Dh
 = 0000002B			ASCII_PLUS		EQU		2Bh
 = 00000030			ASCII_ZERO		EQU		30h
 = 00000039			ASCII_NINE		EQU		39h
 = 00000030			ASCII_BASE		EQU		30h
 = 7FFFFFFF			MAX_POS_VALUE	EQU		2147483647
 = 00000064			MAX_BUFFER		EQU		100
 = 0000000B			COUNTER_BASE	EQU		11

 00000000			.data
 00000000 20 20 20 57 65	greeting		BYTE	"   Welcome to the String IO Project by Megan Marshall.",13,10
	   6C 63 6F 6D 65
	   20 74 6F 20 74
	   68 65 20 53 74
	   72 69 6E 67 20
	   49 4F 20 50 72
	   6F 6A 65 63 74
	   20 62 79 20 4D
	   65 67 61 6E 20
	   4D 61 72 73 68
	   61 6C 6C 2E 0D
	   0A
 00000038  2D 2D 2D 2D 2D					BYTE	"-------------------------------------------------------------",13,10
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 0D 0A
 00000077  2A 2A 45 43 20					BYTE	"**EC 1: Number each line of user input and display a running subtotal of valid inputs.",13,10,13,10
	   31 3A 20 4E 75
	   6D 62 65 72 20
	   65 61 63 68 20
	   6C 69 6E 65 20
	   6F 66 20 75 73
	   65 72 20 69 6E
	   70 75 74 20 61
	   6E 64 20 64 69
	   73 70 6C 61 79
	   20 61 20 72 75
	   6E 6E 69 6E 67
	   20 73 75 62 74
	   6F 74 61 6C 20
	   6F 66 20 76 61
	   6C 69 64 20 69
	   6E 70 75 74 73
	   2E 0D 0A 0D 0A
 000000D1  54 68 69 73 20					BYTE	"This program will ask you for 10 signed decimal integers. Each integer needs to fit in",13,10
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 61 73
	   6B 20 79 6F 75
	   20 66 6F 72 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 20 45 61
	   63 68 20 69 6E
	   74 65 67 65 72
	   20 6E 65 65 64
	   73 20 74 6F 20
	   66 69 74 20 69
	   6E 0D 0A
 00000129  61 20 33 32 20					BYTE	"a 32 bit signed integer. Invalid or non-numeric entries will not be accepted!",13,10,13,10
	   62 69 74 20 73
	   69 67 6E 65 64
	   20 69 6E 74 65
	   67 65 72 2E 20
	   49 6E 76 61 6C
	   69 64 20 6F 72
	   20 6E 6F 6E 2D
	   6E 75 6D 65 72
	   69 63 20 65 6E
	   74 72 69 65 73
	   20 77 69 6C 6C
	   20 6E 6F 74 20
	   62 65 20 61 63
	   63 65 70 74 65
	   64 21 0D 0A 0D
	   0A
 0000017A  41 66 74 65 72					BYTE	"After 10 valid entries have been provided, you will be shown all your valid inputs, their ",13,10
	   20 31 30 20 76
	   61 6C 69 64 20
	   65 6E 74 72 69
	   65 73 20 68 61
	   76 65 20 62 65
	   65 6E 20 70 72
	   6F 76 69 64 65
	   64 2C 20 79 6F
	   75 20 77 69 6C
	   6C 20 62 65 20
	   73 68 6F 77 6E
	   20 61 6C 6C 20
	   79 6F 75 72 20
	   76 61 6C 69 64
	   20 69 6E 70 75
	   74 73 2C 20 74
	   68 65 69 72 20
	   0D 0A
 000001D6  73 75 6D 2C 20					BYTE	"sum, and their average value.",13,10,13,10,0
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 0D
	   0A 0D 0A 00
 000001F8 2E 20 50 6C 65	promptForInput	BYTE	". Please enter a signed integer: ",0
	   61 73 65 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 69
	   6E 74 65 67 65
	   72 3A 20 00
 0000021A 45 52 52 4F 52	errorMessage	BYTE	"ERROR: Your entry was not valid or did not fit in a 32 byte signed integer. Please try again.",13,10,0
	   3A 20 59 6F 75
	   72 20 65 6E 74
	   72 79 20 77 61
	   73 20 6E 6F 74
	   20 76 61 6C 69
	   64 20 6F 72 20
	   64 69 64 20 6E
	   6F 74 20 66 69
	   74 20 69 6E 20
	   61 20 33 32 20
	   62 79 74 65 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 2E
	   20 50 6C 65 61
	   73 65 20 74 72
	   79 20 61 67 61
	   69 6E 2E 0D 0A
	   00
 0000027A 0D 0A 0D 0A 59	resultsMessage	BYTE	13,10,13,10,"You entered these valid numbers: ",13,10,0
	   6F 75 20 65 6E
	   74 65 72 65 64
	   20 74 68 65 73
	   65 20 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 73
	   3A 20 0D 0A 00
 000002A2 0D 0A 54 68 65	finalSumMessage	BYTE	13,10,"The total sum of your valid entries is: ",0
	   20 74 6F 74 61
	   6C 20 73 75 6D
	   20 6F 66 20 79
	   6F 75 72 20 76
	   61 6C 69 64 20
	   65 6E 74 72 69
	   65 73 20 69 73
	   3A 20 00
 000002CD 0D 0A 54 68 65	avgMessage		BYTE	13,10,"The truncated average of your valid entries is: ",0
	   20 74 72 75 6E
	   63 61 74 65 64
	   20 61 76 65 72
	   61 67 65 20 6F
	   66 20 79 6F 75
	   72 20 76 61 6C
	   69 64 20 65 6E
	   74 72 69 65 73
	   20 69 73 3A 20
	   00
 00000300 2C 20 00		commaString		BYTE	", ",0

				; String to store unvalidated user input. 
 00000303  00000064 [		userInput		BYTE	MAX_BUFFER DUP(?)
	    00
	   ]
 00000367 00000000		inputLength		DWORD	?

 0000036B  0000000A [		validInputs		SDWORD	10 DUP(?)
	    00000000
	   ]
 00000393 00000000		sum				SDWORD	?

 00000397 2D 32 31 34 37	testString		BYTE	"-2147483648",0 
	   34 38 33 36 34
	   38 00
 000003A3 00000002		testValP		SDWORD	2
 000003A7 FFFFFFFE		testValN		SDWORD	-2
 00000000			.code
 00000000			main PROC
					mDisplayString	OFFSET greeting
 00000000  52		     1		PUSH	EDX
 00000001  BA 00000000 R     1		MOV		EDX, OFFSET greeting
 00000006  E8 00000000 E     1		CALL	WriteString
 0000000B  5A		     1		POP		EDX

					; We need to retrieve valid user input ten times
					; TODO for tsting
					;MOV		ECX, LENGTHOF validInputs
 0000000C  B9 00000002			MOV			ECX, 2
					; This is where validated numbers will be stored
 00000011  BF 0000036B R		MOV		EDI, OFFSET validInputs

 00000016				_getTenNumbers:
						
 00000016  68 00000303 R			PUSH	OFFSET userInput 
 0000001B  68 0000021A R			PUSH	OFFSET errorMessage ; 24
 00000020  57					PUSH	EDI 
 00000021  68 00000367 R			PUSH	OFFSET inputLength ; 16
 00000026  51					PUSH	ECX
 00000027  68 000001F8 R			PUSH	OFFSET promptForInput ; 8

						; Ask the user for valid input
 0000002C  E8 0000004E				CALL	ReadVal
						
						; Once valid input is written, EDI gets incremented and we repeat
 00000031  83 C7 04				ADD		EDI, TYPE validInputs
 00000034  E2 E0				LOOP	_getTenNumbers

					; Show the array
 00000036  68 00000300 R		PUSH	OFFSET commaString ;24
 0000003B  6A 04			PUSH	TYPE validInputs
 0000003D  68 0000027A R		PUSH	OFFSET resultsMessage ;16
 00000042  6A 0A			PUSH	LENGTHOF validInputs
 00000044  68 0000036B R		PUSH	OFFSET validInputs ;8
 00000049  E8 000001A1			CALL	ArrayDisplay	

					; Show the final values' sum
 0000004E  6A 04			PUSH	TYPE validInputs ;24
 00000050  68 00000393 R		PUSH	OFFSET sum
 00000055  68 000002A2 R		PUSH	OFFSET finalSumMessage ;16
 0000005A  6A 0A			PUSH	LENGTHOF validInputs
 0000005C  68 0000036B R		PUSH	OFFSET validInputs	;8
 00000061  E8 000001C2			CALL	ArraySum

					; Show the truncated average
 00000066  FF 35 00000393 R		PUSH	sum ;16
 0000006C  6A 0A			PUSH	LENGTHOF validInputs
 0000006E  68 000002CD R		PUSH	OFFSET avgMessage ;8
 00000073  E8 000001FD			CALL	TruncatedAverage

					INVOKE  ExitProcess, 0		;exit to operating system
 00000078  6A 00	   *	    push   +000000000h
 0000007A  E8 00000000 E   *	    call   ExitProcess
 0000007F			main ENDP

				; ***************************************************************
				; stuff
				; effective range: -2,147,483,648 to 2,147,483,647

				; ***************************************************************
 0000007F			ReadVal	PROC	USES EAX EBX ECX ESI
					LOCAL	negativeInput:DWORD, currentDigit:DWORD, potentialInput:SDWORD 
 0000007F  55		   *	    push   ebp
 00000080  8B EC	   *	    mov    ebp, esp
 00000082  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 00000085  50		   *	    push   eax
 00000086  53		   *	    push   ebx
 00000087  51		   *	    push   ecx
 00000088  56		   *	    push   esi
 00000089  C7 45 FC			MOV		negativeInput, 0
	   00000000

 00000090				_getInput:
						; Get user input written as a string into userInput. Size will be in inputLength.
 00000090  FF 75 0C				PUSH	[EBP + 12]
 00000093  E8 000001C4				CALL	CurrentCount
						mGetString [EBP + 8], [EBP + 28], MAX_BUFFER, [EBP + 16]
 00000098  50		     1		PUSH	EAX
 00000099  51		     1		PUSH	ECX
 0000009A  52		     1		PUSH	EDX
 0000009B  8B 55 08	     1		MOV		EDX, [EBP + 8]
 0000009E  E8 00000000 E     1		CALL	WriteString
 000000A3  B9 00000064	     1		MOV		ECX, MAX_BUFFER
 000000A8  8B 55 1C	     1		MOV		EDX, [EBP + 28]
 000000AB  E8 00000000 E     1		CALL	ReadString
 000000B0  8B 55 10	     1		MOV		EDX, [EBP + 16]
 000000B3  89 02	     1		MOV		[EDX], EAX
 000000B5  5A		     1		POP		EDX
 000000B6  59		     1		POP		ECX
 000000B7  58		     1		POP		EAX
						
						; Use ESI for the source
 000000B8  8B 75 1C				MOV		ESI, [EBP + 28]

						; syntax reminder
						;MOV		EAX, [EBX]

						; Counter is the number of bytes written by mGetString
 000000BB  8B 5D 10				MOV		EBX, [EBP + 16]
 000000BE  8B 0B				MOV		ECX, [EBX]

						; EBX will be used to track the value as it's validated and built.
 000000C0  BB 00000000				MOV		EBX, 0	
						; If the user enters nothing (empty input), display an error and re-prompt.
 000000C5  83 F9 00				CMP		ECX, 0
 000000C8  74 02				JE		_error
						; Pre-check: if there are more than 11 characters, there's no way it will fit. (This allows for a sign flag)
						; TODO is this legit? try without these two lines.
						;CMP		ECX, 11
						;JA		_error
 000000CA  EB 13				JMP		_checkSign

 000000CC				_error:
						; Display error message
						mDisplayString	[EBP + 24]
 000000CC  52		     1		PUSH	EDX
 000000CD  8B 55 18	     1		MOV		EDX, [EBP + 24]
 000000D0  E8 00000000 E     1		CALL	WriteString
 000000D5  5A		     1		POP		EDX

						; Clear out EAX, reset EBX, and prompt the user for new input.
 000000D6  33 C0				XOR		EAX, EAX
 000000D8  BB 00000000				MOV		EBX, 0
 000000DD  EB B1				JMP		_getInput

					; Check if the first character is '-' or '+'
 000000DF				_checkSign:
 000000DF  AC					LODSB
 000000E0  3C 2D				CMP		AL, ASCII_MINUS
 000000E2  74 06				JE		_negative
 000000E4  3C 2B				CMP		AL, ASCII_PLUS
 000000E6  74 0C				JE		_positive
 000000E8  EB 14				JMP		_unsigned

 000000EA				_negative:
 000000EA  C7 45 FC				MOV		negativeInput, 1
	   00000001
 000000F1  49					DEC		ECX
 000000F2  EB 14				JMP		_processString
 000000F4				_positive:
 000000F4  C7 45 FC				MOV		negativeInput, 0
	   00000000
 000000FB  49					DEC		ECX
 000000FC  EB 0A				JMP		_processString
 000000FE				_unsigned:
 000000FE  C7 45 FC				MOV		negativeInput, 0
	   00000000
						; If the first character wasn't '-' or '+', reset ESI to the first character in the string.
 00000105  8B 75 1C				MOV		ESI, [EBP + 28]

					;TODO turns out my logic is still wrong
 00000108				_processString:
 00000108  33 C0				XOR		EAX, EAX
 0000010A  AC					LODSB
						; Validate! Is the character a sigit between 0 and 9?
 0000010B  3C 30				CMP		AL, ASCII_ZERO
 0000010D  72 BD				JB		_error
 0000010F  3C 39				CMP		AL, ASCII_NINE
 00000111  77 B9				JA		_error

						; If the character was valid, convert the ASCII value to hex value by subtracting 30h.
 00000113  2C 30				SUB		AL, ASCII_BASE
						; Stash this value in currentDigit for the time being
 00000115  89 45 F8				MOV		currentDigit, EAX
						; Then multiply the existing value of EBX by 10 and add or subtrac the newest digit, depending on the sign.
 00000118  8B C3				MOV		EAX, EBX
 0000011A  BB 0000000A				MOV		EBX, 10
 0000011F  F7 E3				MUL		EBX
 00000121  83 7D FC 01				CMP		negativeInput, 1
 00000125  74 02				JE		_subtractNextDigit
 00000127  EB 07				JMP		_addNextDigit
						
 00000129					_subtractNextDigit:
 00000129  2B 45 F8					SUB		EAX, currentDigit
 0000012C  70 9E					JO		_error
							;JC		_error
 0000012E  EB 09					JMP		_nextDigit

 00000130					_addNextDigit:
 00000130  03 45 F8					ADD		EAX, currentDigit
 00000133  70 97					JO		_error
 00000135  72 95					JC		_error
 00000137  EB 00					JMP		_nextDigit

						; Move the final value back into EBX and we're ready for the next digit.
 00000139					_nextDigit:
 00000139  8B D8				MOV		EBX, EAX
								
 0000013B  E2 CB				LOOP	_processString

					; At this point the string has been validated and an integer equivalent built in EBX.

 0000013D				_checkFinalSize:
						; Does the final result fit in a SDWORD? Clear the carry flag first to avoid weird bugs
 0000013D  F8					CLC
 0000013E  C7 45 F4				MOV		potentialInput, 0
	   00000000
 00000145  01 5D F4				ADD		potentialInput, EBX

 00000148  70 82				JO		_error	
						; This is a bit of a mess. When moving an over-large positive number into potentialInput, no flags were being set,
						; and the value simply overflowed to negative numbers. Workaround: Check if the value was supposed to be negative, 
						; then if not, check if unsigned EBX exceeded 2^31 -1
 0000014A  8B 45 FC				MOV		EAX, negativeInput
 0000014D  83 F8 01				CMP		EAX, 1
 00000150  74 0C				JE		_saveResult
 00000152  81 FB 7FFFFFFF			CMP		EBX, MAX_POS_VALUE
 00000158  0F 87 FFFFFF6E			JA		_error

					; Store input correctly in the array, and return.
 0000015E				_saveResult:
						; [EBP + 20] is where the array starts
 0000015E  8B 55 14				MOV		EDX, [EBP + 20]
 00000161  89 1A				MOV		[EDX], EBX
						; TODO all this needs to be cleaned up
 00000163  8B C3				MOV		EAX, EBX
 00000165  E8 00000000 E			CALL	WriteDec
 0000016A  E8 00000000 E			CALL	CRLF
 0000016F  53					PUSH	EBX
 00000170  E8 0000000D				CALL	WriteVal
 00000175  E8 00000000 E			CALL	Crlf
						
 0000017A  5E		   *	    pop    esi
 0000017B  59		   *	    pop    ecx
 0000017C  5B		   *	    pop    ebx
 0000017D  58		   *	    pop    eax
 0000017E  C9		   *	    leave  
 0000017F  C2 0018			RET 24
 00000182			ReadVal	ENDP

				; ***************************************************************
				; stuff
				; Approach: Divide the number by 10. The remainder is the last digit.
				;		Push that onto the stack. Track how much stuff is pushed.
				;		Loop. When the quotient is 0, that is the last digit.
				;		Pop off each character and call mDisplayString
				; needs: value to be written
				; ***************************************************************
 00000182			WriteVal   PROC USES EAX EBX ECX EDX EDI
					LOCAL	outputLength:DWORD, tempString[12]:BYTE
 00000182  55		   *	    push   ebp
 00000183  8B EC	   *	    mov    ebp, esp
 00000185  83 C4 F0	   *	    add    esp, 0FFFFFFF0h
 00000188  50		   *	    push   eax
 00000189  53		   *	    push   ebx
 0000018A  51		   *	    push   ecx
 0000018B  52		   *	    push   edx
 0000018C  57		   *	    push   edi
 0000018D  C7 45 FC			MOV		outputLength, 0
	   00000000
					
					; Get the value to be written
 00000194  8B 45 08			MOV		EAX, [EBP + 8]
					; Get the offset of the output string
 00000197  8D 7D F0			LEA		EDI, tempString

					; Is the value negative?
 0000019A  A9 80000000			TEST	EAX, 80000000h
 0000019F  75 02			JNE		_outputNegative
 000001A1  EB 0E			JMP		_outputDigits

 000001A3				_outputNegative:
						; If the value is negative, go ahead and add a leading '-' to the output.
						; Then get the absolute value of EAX before we start determining the number's digits.
 000001A3  F7 D8				NEG		EAX
						; Need to use AL for a minute, so stash the value in EBX.
 000001A5  8B D8				MOV		EBX, EAX
 000001A7  B8 00000000				MOV		EAX, 0
 000001AC  B0 2D				MOV		AL, ASCII_MINUS		
 000001AE  AA					STOSB
						; Note: Don't increment outputLength here, since nothing is winding up on the stack.
 000001AF  8B C3				MOV		EAX, EBX

 000001B1				_outputDigits:
						; Opting to not display a positive sign for non-negative integers.
 000001B1  33 D2				XOR		EDX, EDX	; clear the remainder register
 000001B3  99					CDQ
 000001B4  B9 0000000A				MOV		ECX, 10
 000001B9  F7 F9				IDIV	ECX	
						; Now EAX contains the quotient and EDX contains the remainder
 000001BB  8B D8				MOV		EBX, EAX
 000001BD  8B C2				MOV		EAX, EDX
 000001BF  83 C0 30				ADD		EAX, ASCII_BASE
						; Opting to push all digits onto the stack. Could also build the string directly
						; and then reverse it, but would have to play games with EAX to use STOSB and IDIV.
 000001C2  50					PUSH	EAX
 000001C3  FF 45 FC				INC		outputLength
						; Recover the quotient, check if it is zero
 000001C6  8B C3				MOV		EAX, EBX
 000001C8  83 F8 00				CMP		EAX, 0
 000001CB  75 E4				JNE		_outputDigits
						; Otherwise, move our total character count into ECX in preparation for building a string.
 000001CD  8B 4D FC				MOV		ECX, outputLength

 000001D0				_buildString:
						; At this point all the digits are on the stack as DWORDS
						; ECX contains the number of digits to be popped and added to the output string array
						; STOSB takes the AL register into the EDI addressed location
 000001D0  58					POP		EAX
 000001D1  AA					STOSB
 000001D2  E2 FC				LOOP	_buildString

					; Add a null-terminator because there's all sorts of mess on the stack.
 000001D4  B8 00000000			MOV		EAX, 0
 000001D9  AA				STOSB

					; Ready to write the string.
 000001DA  8D 5D F0			LEA		EBX, tempString
					mDisplayString	EBX
 000001DD  52		     1		PUSH	EDX
 000001DE  8B D3	     1		MOV		EDX, EBX
 000001E0  E8 00000000 E     1		CALL	WriteString
 000001E5  5A		     1		POP		EDX
						
 000001E6  5F		   *	    pop    edi
 000001E7  5A		   *	    pop    edx
 000001E8  59		   *	    pop    ecx
 000001E9  5B		   *	    pop    ebx
 000001EA  58		   *	    pop    eax
 000001EB  C9		   *	    leave  
 000001EC  C2 0004			RET		4
 000001EF			WriteVal   ENDP

				; ***************************************************************
				; stuff. takes array reference and number of entries 
				; commastring, length, first offset
				; basically works! add comments.
				; ***************************************************************
 000001EF			ArrayDisplay	PROC USES ECX ESI 
 000001EF  51		   *	    push   ecx
 000001F0  56		   *	    push   esi
 000001F1  55				PUSH	EBP						; Preserve EBP
 000001F2  8B EC			MOV		EBP, ESP
					
					; Get the first element of the array
 000001F4  8B 75 10			MOV		ESI, [EBP + 8 + 8]
					; Get the number of elements in the array
 000001F7  8B 4D 14			MOV		ECX, [EBP + 12 + 8]
					; Handle the last element separately since it doesn't need a trailing comma
 000001FA  49				DEC		ECX
					; Display the message
					mDisplayString	[EBP + 16 + 8]
 000001FB  52		     1		PUSH	EDX
 000001FC  8B 55 18	     1		MOV		EDX, [EBP + 16 + 8]
 000001FF  E8 00000000 E     1		CALL	WriteString
 00000204  5A		     1		POP		EDX

 00000205				_showValueAtIndex:
 00000205  FF 36				PUSH	[ESI]
 00000207  E8 FFFFFF76				CALL	WriteVal
 0000020C  03 75 1C				ADD		ESI, [EBP + 20 + 8]
						; Print trailing comma and space
						mDisplayString	[EBP + 24 + 8]
 0000020F  52		     1		PUSH	EDX
 00000210  8B 55 20	     1		MOV		EDX, [EBP + 24 + 8]
 00000213  E8 00000000 E     1		CALL	WriteString
 00000218  5A		     1		POP		EDX
 00000219  E2 EA				LOOP	_showValueAtIndex
					
 0000021B  FF 36			PUSH	[ESI]
 0000021D  E8 FFFFFF60			CALL	WriteVal
 00000222  5D				POP		EBP						; Restore EBP
 00000223  5E		   *	    pop    esi
 00000224  59		   *	    pop    ecx
 00000225  C2 0018			RET		24						; De-reference and return
 00000228			ArrayDisplay	ENDP

				; ***************************************************************
				; stuff. takes array reference and number of entries to sum (for EC 1)
				; message, length, first offset
				; ***************************************************************
 00000228			ArraySum	PROC USES EAX ECX ESI 
 00000228  50		   *	    push   eax
 00000229  51		   *	    push   ecx
 0000022A  56		   *	    push   esi
 0000022B  55				PUSH	EBP						; Preserve EBP
 0000022C  8B EC			MOV		EBP, ESP
					
					; Get the first element of the array
 0000022E  8B 75 14			MOV		ESI, [EBP + 8 + 12]
					; Get the number of elements in the array
 00000231  8B 4D 18			MOV		ECX, [EBP + 12 + 12]
					; Display the message
					mDisplayString	[EBP + 16 + 12]
 00000234  52		     1		PUSH	EDX
 00000235  8B 55 1C	     1		MOV		EDX, [EBP + 16 + 12]
 00000238  E8 00000000 E     1		CALL	WriteString
 0000023D  5A		     1		POP		EDX

 0000023E  B8 00000000			MOV		EAX, 0
 00000243				_sumLoop:
 00000243  03 06				ADD		EAX, [ESI]
 00000245  03 75 24				ADD		ESI, [EBP + 24 + 12]
 00000248  E2 F9				LOOP	_sumLoop
 0000024A  50				PUSH	EAX
 0000024B  E8 FFFFFF32			CALL	WriteVal
					; Store the result -- we'll need it for finding the average
 00000250  8B 55 20			MOV		EDX, [EBP + 20 + 12]
 00000253  89 02			MOV		[EDX], EAX

 00000255  5D				POP		EBP						; Restore EBP
 00000256  5E		   *	    pop    esi
 00000257  59		   *	    pop    ecx
 00000258  58		   *	    pop    eax
 00000259  C2 0014			RET		20						; De-reference the stack and return
 0000025C			ArraySum	ENDP

				; ***************************************************************
				; stuff. prints the line number (for EC 1)
				; DONE TODO Comments
				; ***************************************************************
 0000025C			CurrentCount	PROC	USES EAX EDX
 0000025C  50		   *	    push   eax
 0000025D  52		   *	    push   edx
 0000025E  55				PUSH	EBP						; Preserve EBP
 0000025F  8B EC			MOV		EBP, ESP
					; Get the counter value from the stack
 00000261  8B 45 10			MOV		EAX, [EBP + 8 + 8]

					; Calculate the current line number
 00000264  83 E8 0B			SUB		EAX, COUNTER_BASE
 00000267  F7 D8			NEG		EAX
					; Pass the value off to WriteVal
 00000269  50				PUSH	EAX
 0000026A  E8 FFFFFF13			CALL	WriteVal

 0000026F  5D				POP		EBP					; Restore EBP
 00000270  5A		   *	    pop    edx
 00000271  58		   *	    pop    eax
 00000272  C2 0004			RET		4					; De-reference the 2 4-byte offsets on the stack and return
 00000275			CurrentCount	ENDP

				; ***************************************************************
				; stuff. takes sum and number of entries
				; ***************************************************************
 00000275			TruncatedAverage	PROC	USES EAX EBX EDX
 00000275  50		   *	    push   eax
 00000276  53		   *	    push   ebx
 00000277  52		   *	    push   edx
 00000278  55				PUSH	EBP						; Preserve EBP
 00000279  8B EC			MOV		EBP, ESP
					; Get the sum value
 0000027B  8B 45 1C			MOV		EAX, [EBP + 16 + 12]
 0000027E  99				CDQ
					; Get the number of inputs
 0000027F  8B 5D 18			MOV		EBX, [EBP + 12 + 12]
					; Find the truncated average -- just ignore the remainder
 00000282  F7 FB			IDIV	EBX
					; Display the message
					mDisplayString [EBP + 8 + 12]
 00000284  52		     1		PUSH	EDX
 00000285  8B 55 14	     1		MOV		EDX, [EBP + 8 + 12]
 00000288  E8 00000000 E     1		CALL	WriteString
 0000028D  5A		     1		POP		EDX
 0000028E  50				PUSH	EAX
 0000028F  E8 FFFFFEEE			CALL	WriteVal

 00000294  5D				POP		EBP					; Restore EBP
 00000295  5A		   *	    pop    edx
 00000296  5B		   *	    pop    ebx
 00000297  58		   *	    pop    eax
 00000298  C2 000C			RET		12					; De-reference and return
 0000029B			TruncatedAverage	ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30133.0	    12/04/21 21:49:19
String IO (Proj6_marshmeg.asm				     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000003AB Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000029B Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ArrayDisplay . . . . . . . . . .	P Near	 000001EF _TEXT	Length= 00000039 Public STDCALL
  _showValueAtIndex  . . . . . .	L Near	 00000205 _TEXT	
ArraySum . . . . . . . . . . . .	P Near	 00000228 _TEXT	Length= 00000034 Public STDCALL
  _sumLoop . . . . . . . . . . .	L Near	 00000243 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CurrentCount . . . . . . . . . .	P Near	 0000025C _TEXT	Length= 00000019 Public STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 0000007F _TEXT	Length= 00000103 Public STDCALL
  negativeInput  . . . . . . . .	DWord	 bp - 00000004
  currentDigit . . . . . . . . .	DWord	 bp - 00000008
  potentialInput . . . . . . . .	DWord	 bp - 0000000C
  _getInput  . . . . . . . . . .	L Near	 00000090 _TEXT	
  _error . . . . . . . . . . . .	L Near	 000000CC _TEXT	
  _checkSign . . . . . . . . . .	L Near	 000000DF _TEXT	
  _negative  . . . . . . . . . .	L Near	 000000EA _TEXT	
  _positive  . . . . . . . . . .	L Near	 000000F4 _TEXT	
  _unsigned  . . . . . . . . . .	L Near	 000000FE _TEXT	
  _processString . . . . . . . .	L Near	 00000108 _TEXT	
  _subtractNextDigit . . . . . .	L Near	 00000129 _TEXT	
  _addNextDigit  . . . . . . . .	L Near	 00000130 _TEXT	
  _nextDigit . . . . . . . . . .	L Near	 00000139 _TEXT	
  _checkFinalSize  . . . . . . .	L Near	 0000013D _TEXT	
  _saveResult  . . . . . . . . .	L Near	 0000015E _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
TruncatedAverage . . . . . . . .	P Near	 00000275 _TEXT	Length= 00000026 Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000182 _TEXT	Length= 0000006D Public STDCALL
  outputLength . . . . . . . . .	DWord	 bp - 00000004
  tempString . . . . . . . . . .	Byte	 bp - 00000010
  _outputNegative  . . . . . . .	L Near	 000001A3 _TEXT	
  _outputDigits  . . . . . . . .	L Near	 000001B1 _TEXT	
  _buildString . . . . . . . . .	L Near	 000001D0 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000007F Public STDCALL
  _getTenNumbers . . . . . . . .	L Near	 00000016 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ASCII_BASE . . . . . . . . . . .	Number	 00000030h   
ASCII_MINUS  . . . . . . . . . .	Number	 0000002Dh   
ASCII_NINE . . . . . . . . . . .	Number	 00000039h   
ASCII_PLUS . . . . . . . . . . .	Number	 0000002Bh   
ASCII_ZERO . . . . . . . . . . .	Number	 00000030h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COUNTER_BASE . . . . . . . . . .	Number	 0000000Bh   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_BUFFER . . . . . . . . . . .	Number	 00000064h   
MAX_POS_VALUE  . . . . . . . . .	Number	 7FFFFFFFh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgMessage . . . . . . . . . . .	Byte	 000002CD _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
commaString  . . . . . . . . . .	Byte	 00000300 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorMessage . . . . . . . . . .	Byte	 0000021A _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
finalSumMessage  . . . . . . . .	Byte	 000002A2 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 00000000 _DATA	
inputLength  . . . . . . . . . .	DWord	 00000367 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
promptForInput . . . . . . . . .	Byte	 000001F8 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
resultsMessage . . . . . . . . .	Byte	 0000027A _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000393 _DATA	
testString . . . . . . . . . . .	Byte	 00000397 _DATA	
testValN . . . . . . . . . . . .	DWord	 000003A7 _DATA	
testValP . . . . . . . . . . . .	DWord	 000003A3 _DATA	
userInput  . . . . . . . . . . .	Byte	 00000303 _DATA	
validInputs  . . . . . . . . . .	DWord	 0000036B _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
