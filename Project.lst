Microsoft (R) Macro Assembler Version 14.29.30133.0	    12/02/21 23:32:22
User IO (Proj6_marshmeg.asm				     Page 1 - 1


				TITLE User IO (Proj6_marshmeg.asm)

				; Author: Megan Marshall
				; Last Modified: December 1, 2021
				; OSU email address:marshmeg@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6               Due Date: December 5, 2021
				; Description: This program uses macros to support string processing and user input/output. It gathers 10 inputs from the user,
				;				validates that they are integers in the correct range, sotres them in an array, and displays the results,
				;				their sum, and their rounded average to the user. 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; Macros!
				mGetString MACRO promptMessage, inputString, maxLength, bytesRead
				; Display a prompt (input parameter, by reference), then get the user’s keyboard input into a memory location (output parameter, by reference).
				;You may also need to provide a count (input parameter, by value) for the length of input string you can accommodate and a provide a number of bytes read 
				;(output parameter, by reference) by the macro.
					
					PUSH	EAX
					PUSH	ECX
					PUSH	EDX

					MOV		EDX, promptMessage
					CALL	WriteString
					MOV		ECX, maxLength
					MOV		EDX, inputString
					CALL	ReadString
					; Track how many characters the user entered. Note this is +1 for null terminated.
					;MOV		bytesRead, EAX	
					MOV		EDX, bytesRead
					MOV		[EDX], EAX

					POP		EDX
					POP		ECX
					POP		EAX
				ENDM

				mDisplayString MACRO printTarget
				;Print the string which is stored in a specified memory location (input parameter, by reference).
					MOV		EDX, printTarget
					CALL	WriteString
				ENDM

				; Constants. Defining bounds of valid ASCII inputs so I don't have ambiguous hex values in my code.
 = 0000002D			ASCII_MINUS		EQU		2Dh
 = 0000002B			ASCII_PLUS		EQU		2Bh
 = 00000030			ASCII_ZERO		EQU		30h
 = 00000039			ASCII_NINE		EQU		39h
 = 00000030			ASCII_BASE		EQU		30h
 = 7FFFFFFF			MAX_POS_VALUE	EQU		2147483647
 = 00000064			MAX_BUFFER		EQU		100

 00000000			.data
 00000000 20 20 20 57 65	greeting		BYTE	"   Welcome to the String IO Project by Megan Marshall.",13,10
	   6C 63 6F 6D 65
	   20 74 6F 20 74
	   68 65 20 53 74
	   72 69 6E 67 20
	   49 4F 20 50 72
	   6F 6A 65 63 74
	   20 62 79 20 4D
	   65 67 61 6E 20
	   4D 61 72 73 68
	   61 6C 6C 2E 0D
	   0A
 00000038  2D 2D 2D 2D 2D					BYTE	"-------------------------------------------------------------",13,10
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 0D 0A
 00000077  2A 2A 45 43 20					BYTE	"**EC 1: Number each line of user input and display a running subtotal of valid inputs.",13,10,13,10
	   31 3A 20 4E 75
	   6D 62 65 72 20
	   65 61 63 68 20
	   6C 69 6E 65 20
	   6F 66 20 75 73
	   65 72 20 69 6E
	   70 75 74 20 61
	   6E 64 20 64 69
	   73 70 6C 61 79
	   20 61 20 72 75
	   6E 6E 69 6E 67
	   20 73 75 62 74
	   6F 74 61 6C 20
	   6F 66 20 76 61
	   6C 69 64 20 69
	   6E 70 75 74 73
	   2E 0D 0A 0D 0A
 000000D1  54 68 69 73 20					BYTE	"This program will ask you for 10 signed decimal integers. ",13,10
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 61 73
	   6B 20 79 6F 75
	   20 66 6F 72 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 20 0D 0A
 0000010D  45 61 63 68 20					BYTE	"Each integer needs to fit in a 32 bit signed integer. Therefore, it should be no smaller ",13,10
	   69 6E 74 65 67
	   65 72 20 6E 65
	   65 64 73 20 74
	   6F 20 66 69 74
	   20 69 6E 20 61
	   20 33 32 20 62
	   69 74 20 73 69
	   67 6E 65 64 20
	   69 6E 74 65 67
	   65 72 2E 20 54
	   68 65 72 65 66
	   6F 72 65 2C 20
	   69 74 20 73 68
	   6F 75 6C 64 20
	   62 65 20 6E 6F
	   20 73 6D 61 6C
	   6C 65 72 20 0D
	   0A
 00000168  74 68 61 6E 20					BYTE	"than -2,147,483,648 and no larger than 2,147,483,647.",13,10
	   2D 32 2C 31 34
	   37 2C 34 38 33
	   2C 36 34 38 20
	   61 6E 64 20 6E
	   6F 20 6C 61 72
	   67 65 72 20 74
	   68 61 6E 20 32
	   2C 31 34 37 2C
	   34 38 33 2C 36
	   34 37 2E 0D 0A
 0000019F  49 6E 76 61 6C					BYTE	"Invalid entries will not be accepted!",13,10,13,10
	   69 64 20 65 6E
	   74 72 69 65 73
	   20 77 69 6C 6C
	   20 6E 6F 74 20
	   62 65 20 61 63
	   63 65 70 74 65
	   64 21 0D 0A 0D
	   0A
 000001C8  41 66 74 65 72					BYTE	"After 10 valid entries have been provided, you will be shown all your valid inputs, their ",13,10
	   20 31 30 20 76
	   61 6C 69 64 20
	   65 6E 74 72 69
	   65 73 20 68 61
	   76 65 20 62 65
	   65 6E 20 70 72
	   6F 76 69 64 65
	   64 2C 20 79 6F
	   75 20 77 69 6C
	   6C 20 62 65 20
	   73 68 6F 77 6E
	   20 61 6C 6C 20
	   79 6F 75 72 20
	   76 61 6C 69 64
	   20 69 6E 70 75
	   74 73 2C 20 74
	   68 65 69 72 20
	   0D 0A
 00000224  73 75 6D 2C 20					BYTE	"sum, and their average value.",13,10,13,10,0
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 0D
	   0A 0D 0A 00
 00000246 2E 20 50 6C 65	promptForInput	BYTE	". Please enter a signed integer: ",0
	   61 73 65 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 69
	   6E 74 65 67 65
	   72 3A 20 00
 00000268 45 52 52 4F 52	errorMessage	BYTE	"ERROR: Your entry was not valid or did not fit in a 32 byte signed integer. Please try again.",13,10,0
	   3A 20 59 6F 75
	   72 20 65 6E 74
	   72 79 20 77 61
	   73 20 6E 6F 74
	   20 76 61 6C 69
	   64 20 6F 72 20
	   64 69 64 20 6E
	   6F 74 20 66 69
	   74 20 69 6E 20
	   61 20 33 32 20
	   62 79 74 65 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 2E
	   20 50 6C 65 61
	   73 65 20 74 72
	   79 20 61 67 61
	   69 6E 2E 0D 0A
	   00

				; String to store unvalidated user input. 
 000002C8  00000064 [		userInput		BYTE	MAX_BUFFER DUP(?)
	    00
	   ]
 0000032C 00000000		inputLength		DWORD	?

 00000330 00000001		validCount		DWORD	1
 00000334  0000000A [		validInputs		SDWORD	10 DUP(?)
	    00000000
	   ]
 0000035C 00000000		average			SDWORD	?

 00000360 00000000		potentialInput	SDWORD	0
 00000364 00000000		currentDigit	DWORD	0
				; String to store output. 
 00000368  0000000F [		displayOutput	BYTE	15 DUP(?)
	    00
	   ]
 00000377 00000000		pushedChars		DWORD	0

 0000037B 2D 32 31 34 37	testString		BYTE	"-2147483648",0 
	   34 38 33 36 34
	   38 00
 00000387 0182E208		testValP		SDWORD	25354760
 0000038B FE7D1DF8		testValN		SDWORD	-25354760
 00000000			.code
 00000000			main PROC
					mDisplayString	OFFSET greeting
 00000000  BA 00000000 R     1		MOV		EDX, OFFSET greeting
 00000005  E8 00000000 E     1		CALL	WriteString

 0000000A  68 00000246 R		PUSH	OFFSET promptForInput ; 32
 0000000F  68 000002C8 R		PUSH	OFFSET userInput 
 00000014  68 00000268 R		PUSH	OFFSET errorMessage ; 24
 00000019  68 00000330 R		PUSH	OFFSET validCount
 0000001E  68 0000032C R		PUSH	OFFSET inputLength ; 16
 00000023  68 00000360 R		PUSH	OFFSET potentialInput
 00000028  68 00000364 R		PUSH	OFFSET currentDigit ; 8
 0000002D  E8 0000002C			CALL	ReadVal
					
 00000032  FF 35 00000387 R		PUSH	testValP
 00000038  68 00000368 R		PUSH	OFFSET displayOutput
 0000003D  E8 00000123			CALL	WriteVal
 00000042  E8 00000000 E		CALL	Crlf
					
 00000047  FF 35 0000038B R		PUSH	testValN
 0000004D  68 00000368 R		PUSH	OFFSET displayOutput
 00000052  E8 0000010E			CALL	WriteVal
					INVOKE  ExitProcess, 0		;exit to operating system
 00000057  6A 00	   *	    push   +000000000h
 00000059  E8 00000000 E   *	    call   ExitProcess
 0000005E			main ENDP

				; ***************************************************************
				; stuff
				; effective range: -2,147,483,648 to 2,147,483,647

				; ***************************************************************
 0000005E			ReadVal	PROC	USES EAX EBX ECX ESI
					LOCAL	negativeInput:DWORD 
 0000005E  55		   *	    push   ebp
 0000005F  8B EC	   *	    mov    ebp, esp
 00000061  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000064  50		   *	    push   eax
 00000065  53		   *	    push   ebx
 00000066  51		   *	    push   ecx
 00000067  56		   *	    push   esi
 00000068  C7 45 FC			MOV		negativeInput, 0
	   00000000

 0000006F				_getInput:
 0000006F  8B 45 14				MOV		EAX, [EBP + 20]
 00000072  FF 30				PUSH	[EAX]
						; TODO fix
 00000074  68 00000368 R			PUSH	OFFSET displayOutput
 00000079  E8 000000E7				CALL	WriteVal
						mGetString [EBP + 32], [EBP + 28], MAX_BUFFER, [EBP + 16]
 0000007E  50		     1		PUSH	EAX
 0000007F  51		     1		PUSH	ECX
 00000080  52		     1		PUSH	EDX
 00000081  8B 55 20	     1		MOV		EDX, [EBP + 32]
 00000084  E8 00000000 E     1		CALL	WriteString
 00000089  B9 00000064	     1		MOV		ECX, MAX_BUFFER
 0000008E  8B 55 1C	     1		MOV		EDX, [EBP + 28]
 00000091  E8 00000000 E     1		CALL	ReadString
 00000096  8B 55 10	     1		MOV		EDX, [EBP + 16]
 00000099  89 02	     1		MOV		[EDX], EAX
 0000009B  5A		     1		POP		EDX
 0000009C  59		     1		POP		ECX
 0000009D  58		     1		POP		EAX
					
						; EBX will be used to track the value as it's validated and built.
 0000009E  BB 00000000				MOV		EBX, 0	


						; TODO replace with actual parameter, stack reference
						; Use ESI for the source
 000000A3  8B 75 1C				MOV		ESI,  [EBP + 28]
						; Replace with the number of bytes written by mGetString
						; TODO stack
 000000A6  8B 0D 0000032C R			MOV		ECX, inputLength
						; If the user enters nothing (empty input), display an error and re-prompt.
 000000AC  83 F9 00				CMP		ECX, 0
 000000AF  74 07				JE		_error
						; Pre-check: if there are more than 11 characters, there's no way it will fit. (This allows for a sign flag)
 000000B1  83 F9 0B				CMP		ECX, 11
 000000B4  77 02				JA		_error
 000000B6  EB 1C				JMP		_checkSign

 000000B8				_error:
						; Display error message
						mDisplayString	[EBP + 24]
 000000B8  8B 55 18	     1		MOV		EDX, [EBP + 24]
 000000BB  E8 00000000 E     1		CALL	WriteString
 000000C0  E8 00000000 E			CALL	WriteString

						; Clear out EAX, reset potentialInput, and prompt the user for new input.
 000000C5  33 C0				XOR		EAX, EAX
 000000C7  BB 00000000				MOV		EBX, 0
						; TODO temporary
						RET
 000000CC  5E		   *	    pop    esi
 000000CD  59		   *	    pop    ecx
 000000CE  5B		   *	    pop    ebx
 000000CF  58		   *	    pop    eax
 000000D0  C9		   *	    leave  
 000000D1  C3		   *	    ret    00000h
 000000D2  EB 9B				JMP		_getInput

					; Check if the first character is '-' or '+'
 000000D4				_checkSign:
 000000D4  AC					LODSB
 000000D5  3C 2D				CMP		AL, ASCII_MINUS
 000000D7  74 06				JE		_negative
 000000D9  3C 2B				CMP		AL, ASCII_PLUS
 000000DB  74 0C				JE		_positive
 000000DD  EB 14				JMP		_unsigned

 000000DF				_negative:
 000000DF  C7 45 FC				MOV		negativeInput, 1
	   00000001
 000000E6  49					DEC		ECX
 000000E7  EB 16				JMP		_processString
 000000E9				_positive:
 000000E9  C7 45 FC				MOV		negativeInput, 0
	   00000000
 000000F0  49					DEC		ECX
 000000F1  EB 0C				JMP		_processString
 000000F3				_unsigned:
 000000F3  C7 45 FC				MOV		negativeInput, 0
	   00000000
						; If the first character wasn't '-' or '+', reset ESI to the first character in the string.
 000000FA  BE 0000037B R			MOV		ESI, OFFSET testString

 000000FF				_processString:
 000000FF  33 C0				XOR		EAX, EAX
 00000101  AC					LODSB
						; Validate! Is the character a sigit between 0 and 9?
 00000102  3C 30				CMP		AL, ASCII_ZERO
 00000104  72 B2				JB		_error
 00000106  3C 39				CMP		AL, ASCII_NINE
 00000108  77 AE				JA		_error

						; If the character was valid, convert the ASCII value to hex value by subtracting 30h.
 0000010A  2C 30				SUB		AL, ASCII_BASE
						; Stash this value in currentDigit for the time being
 0000010C  A3 00000364 R			MOV		currentDigit, EAX
						; Then multiply the existing value of EBX by 10 and add or subtrac the newest digit, depending on the sign.
 00000111  8B C3				MOV		EAX, EBX
 00000113  BB 0000000A				MOV		EBX, 10
 00000118  F7 E3				MUL		EBX
 0000011A  83 7D FC 01				CMP		negativeInput, 1
 0000011E  74 02				JE		_subtractNextDigit
 00000120  EB 0A				JMP		_addNextDigit
						
 00000122					_subtractNextDigit:
 00000122  2B 05 00000364 R				SUB		EAX, currentDigit
 00000128  70 8E					JO		_error
 0000012A  EB 0A					JMP		_nextDigit

 0000012C					_addNextDigit:
 0000012C  03 05 00000364 R				ADD		EAX, currentDigit
 00000132  70 84					JO		_error
 00000134  EB 00					JMP		_nextDigit

						; Move the final value back into EBX and we're ready for the next digit.
 00000136					_nextDigit:
 00000136  8B D8				MOV		EBX, EAX
								
 00000138  E2 C5				LOOP	_processString

					; At this point the string has been validated and an integer equivalent built in EBX.

 0000013A				_checkFinalSize:
						; Does the final result fit in a SDWORD? Clear the carry flag first to avoid weird bugs
 0000013A  F8					CLC
 0000013B  01 1D 00000360 R			ADD		potentialInput, EBX

 00000141  0F 80 FFFFFF71			JO		_error		
 00000147  8B 45 FC				MOV		EAX, negativeInput
 0000014A  83 F8 01				CMP		EAX, 1
 0000014D  74 0C				JE		_saveResult
 0000014F  81 FB 7FFFFFFF			CMP		EBX, MAX_POS_VALUE
 00000155  0F 87 FFFFFF5D			JA		_error

					;TODO increment validCount, store input correctly, and return if the input was valid. Otherwise start over.
 0000015B				_saveResult:
						; TODO well this isn't working
 0000015B  8B 45 14				MOV		EAX, [EBP + 20]
 0000015E  40					INC		EAX
						;MOV		[EBP + 20], EAX
						
					RET
 0000015F  5E		   *	    pop    esi
 00000160  59		   *	    pop    ecx
 00000161  5B		   *	    pop    ebx
 00000162  58		   *	    pop    eax
 00000163  C9		   *	    leave  
 00000164  C3		   *	    ret    00000h
 00000165			ReadVal	ENDP

				; ***************************************************************
				; stuff
				; Approach: Divide the number by 10. The remainder is the last digit.
				;		Push that onto the stack. Track how much stuff is pushed.
				;		Loop. When the quotient is 0, that is the last digit.
				;		Pop off each character and call mDisplayString
				; needs: pushedChars, address of result string
				; ***************************************************************
 00000165			WriteVal   PROC USES EAX EBX ECX EDX EDI
					LOCAL	outputLength:DWORD
 00000165  55		   *	    push   ebp
 00000166  8B EC	   *	    mov    ebp, esp
 00000168  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 0000016B  50		   *	    push   eax
 0000016C  53		   *	    push   ebx
 0000016D  51		   *	    push   ecx
 0000016E  52		   *	    push   edx
 0000016F  57		   *	    push   edi
 00000170  C7 45 FC			MOV		outputLength, 0
	   00000000
					; Get the value to be written
 00000177  8B 45 0C			MOV		EAX, [EBP + 12]
					; Get the offset of the output string
 0000017A  8B 7D 08			MOV		EDI, [EBP + 8]

					; Is the value negative?
 0000017D  A9 80000000			TEST	EAX, 80000000h
 00000182  75 02			JNE		_outputNegative
 00000184  EB 0E			JMP		_outputDigits

 00000186				_outputNegative:
						; If the value is negative, go ahead and add a leading '-' to the output.
						; Then get the absolute value of EAX before we start determining the number's digits.
 00000186  F7 D8				NEG		EAX
						; Need to use AL for a minute, so stash the value in EBX.
 00000188  8B D8				MOV		EBX, EAX
 0000018A  B8 00000000				MOV		EAX, 0
 0000018F  B0 2D				MOV		AL, ASCII_MINUS		
 00000191  AA					STOSB
						; Note: Don't increment outputLength here, since nothing is winding up on the stack.
 00000192  8B C3				MOV		EAX, EBX

 00000194				_outputDigits:
						; Opting to not display a positive sign for non-negative integers.
 00000194  33 D2				XOR		EDX, EDX	; clear the remainder register
 00000196  99					CDQ
 00000197  B9 0000000A				MOV		ECX, 10
 0000019C  F7 F9				IDIV	ECX	
						; Now EAX contains the quotient and EDX contains the remainder
 0000019E  8B D8				MOV		EBX, EAX
 000001A0  8B C2				MOV		EAX, EDX
 000001A2  83 C0 30				ADD		EAX, ASCII_BASE
						; Opting to push all digits onto the stack. Could also build the string directly
						; and then reverse it, but would have to play games with EAX to use STOSB and IDIV.
 000001A5  50					PUSH	EAX
 000001A6  FF 45 FC				INC		outputLength
						; Recover the quotient, check if it is zero
 000001A9  8B C3				MOV		EAX, EBX
 000001AB  83 F8 00				CMP		EAX, 0
 000001AE  75 E4				JNE		_outputDigits
						; Otherwise, move our total character count into ECX in preparation for building a string.
 000001B0  8B 4D FC				MOV		ECX, outputLength

 000001B3				_buildString:
						; At this point all the digits are on the stack as DWORDS
						; ECX contains the number of digits to be popped and added to the output string array
						; STOSB takes the AL register into the EDI addressed location
 000001B3  58					POP		EAX
 000001B4  AA					STOSB
 000001B5  E2 FC				LOOP	_buildString

					; All digits popped off of the stack. Ready to write the string.
					mDisplayString	OFFSET displayOutput
 000001B7  BA 00000368 R     1		MOV		EDX, OFFSET displayOutput
 000001BC  E8 00000000 E     1		CALL	WriteString
						
 000001C1  5F		   *	    pop    edi
 000001C2  5A		   *	    pop    edx
 000001C3  59		   *	    pop    ecx
 000001C4  5B		   *	    pop    ebx
 000001C5  58		   *	    pop    eax
 000001C6  C9		   *	    leave  
 000001C7  C2 0004			RET		4
 000001CA			WriteVal   ENDP

				; ***************************************************************
				; stuff. takes array reference and number of entries to sum (for EC 1)
				; ***************************************************************
 000001CA			ArraySum	PROC
 000001CA  C3				RET
 000001CB			ArraySum	ENDP


				; ***************************************************************
				; stuff. takes sum and number of entries
				; ***************************************************************
 000001CB			TruncatedAverage	PROC
 000001CB  C3				RET
 000001CC			TruncatedAverage	ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30133.0	    12/02/21 23:32:22
User IO (Proj6_marshmeg.asm				     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000038F Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001CC Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ArraySum . . . . . . . . . . . .	P Near	 000001CA _TEXT	Length= 00000001 Public STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 0000005E _TEXT	Length= 00000107 Public STDCALL
  negativeInput  . . . . . . . .	DWord	 bp - 00000004
  _getInput  . . . . . . . . . .	L Near	 0000006F _TEXT	
  _error . . . . . . . . . . . .	L Near	 000000B8 _TEXT	
  _checkSign . . . . . . . . . .	L Near	 000000D4 _TEXT	
  _negative  . . . . . . . . . .	L Near	 000000DF _TEXT	
  _positive  . . . . . . . . . .	L Near	 000000E9 _TEXT	
  _unsigned  . . . . . . . . . .	L Near	 000000F3 _TEXT	
  _processString . . . . . . . .	L Near	 000000FF _TEXT	
  _subtractNextDigit . . . . . .	L Near	 00000122 _TEXT	
  _addNextDigit  . . . . . . . .	L Near	 0000012C _TEXT	
  _nextDigit . . . . . . . . . .	L Near	 00000136 _TEXT	
  _checkFinalSize  . . . . . . .	L Near	 0000013A _TEXT	
  _saveResult  . . . . . . . . .	L Near	 0000015B _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
TruncatedAverage . . . . . . . .	P Near	 000001CB _TEXT	Length= 00000001 Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000165 _TEXT	Length= 00000065 Public STDCALL
  outputLength . . . . . . . . .	DWord	 bp - 00000004
  _outputNegative  . . . . . . .	L Near	 00000186 _TEXT	
  _outputDigits  . . . . . . . .	L Near	 00000194 _TEXT	
  _buildString . . . . . . . . .	L Near	 000001B3 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000005E Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ASCII_BASE . . . . . . . . . . .	Number	 00000030h   
ASCII_MINUS  . . . . . . . . . .	Number	 0000002Dh   
ASCII_NINE . . . . . . . . . . .	Number	 00000039h   
ASCII_PLUS . . . . . . . . . . .	Number	 0000002Bh   
ASCII_ZERO . . . . . . . . . . .	Number	 00000030h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_BUFFER . . . . . . . . . . .	Number	 00000064h   
MAX_POS_VALUE  . . . . . . . . .	Number	 7FFFFFFFh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
average  . . . . . . . . . . . .	DWord	 0000035C _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
currentDigit . . . . . . . . . .	DWord	 00000364 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
displayOutput  . . . . . . . . .	Byte	 00000368 _DATA	
errorMessage . . . . . . . . . .	Byte	 00000268 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 00000000 _DATA	
inputLength  . . . . . . . . . .	DWord	 0000032C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
potentialInput . . . . . . . . .	DWord	 00000360 _DATA	
promptForInput . . . . . . . . .	Byte	 00000246 _DATA	
pushedChars  . . . . . . . . . .	DWord	 00000377 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
testString . . . . . . . . . . .	Byte	 0000037B _DATA	
testValN . . . . . . . . . . . .	DWord	 0000038B _DATA	
testValP . . . . . . . . . . . .	DWord	 00000387 _DATA	
userInput  . . . . . . . . . . .	Byte	 000002C8 _DATA	
validCount . . . . . . . . . . .	DWord	 00000330 _DATA	
validInputs  . . . . . . . . . .	DWord	 00000334 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
